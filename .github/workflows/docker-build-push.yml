name: Build all docker images
env:
  REGISTRY_ALIAS: openscpca
  DOCKER_MODULES: '["hello-python", "hello-r", "simulate-sce"]'

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main
      - jashapiro/docker-allinone
    # paths:
    #   - "analyses/*/Dockerfile"
    #   - "analyses/*/.dockerignore"
    #   - "analyses/*/renv.lock"
    #   - "analyses/*/conda-lock.yml"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  get-modules:
    name: Get module names
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ fromJson(steps.get-modules.outputs.modules) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find changed modules names
        id: find-modules
        run: |
          # diff to get changed files, then grep for relevant files, cut to get module names, sort and uniq to get unique names
          git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | \
          grep -E 'Dockerfile|\.dockerignore|renv.lock|conda-lock.yml' | \
          cut -d '/' -f 2 | \
          sort | uniq \
          > modules.txt
          # Use jq to diff with the list of docker modules and export json
          <modules.txt jq -Rcn "$DOCKER_MODULES - ($DOCKER_MODULES - [inputs])" > modules.json

      - name: Set modules output
        id: get-modules
        run: |

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # if a workflow_dispatch, build all modules
            echo "modules=$DOCKER_MODULES" >> $GITHUB_OUTPUT
          elif $(jq -e '. | length == 0' modules.json); then
            # if no modules changed, set to None
            echo "modules='["None"]'" >> $GITHUB_OUTPUT
          else
            # otherwise, set to changed modules
            echo "modules=$(cat modules.json)" >> $GITHUB_OUTPUT
          fi

  docker-matrix:
    name: Build Docker images
    runs-on: ubuntu-latest
    needs: get-modules
    strategy:
      fail-fast: false
      matrix:
        # If workflow_dispatch, build all modules, otherwise only changed modules
        module: ${{ fromJson(needs.get-modules.outputs.modules) }}

    steps:
      - name: Configure AWS credentials
        if: matrix.module != 'None'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::992382809252:role/GithubOpenId
          role-session-name: githubActionSession
          aws-region: us-east-1

      # - name: Log in to Amazon ECR
      #   if: matrix.module != 'None'
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2
      #   with:
      #     registry-type: public

      # - name: Create ECR repository if needed
      #   if: matrix.module != 'None'
      #   id: create-ecr
      #   run: |
      #     aws ecr-public describe-repositories --repository-names ${{ matrix.module }} \
      #     || aws ecr-public create-repository --repository-name ${{ matrix.module }}

      # - name: Set up Docker Buildx
      #   if: matrix.module != 'None'
      #   uses: docker/setup-buildx-action@v3

      # - name: Docker metadata
      #   if: matrix.module != 'None'
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: public.ecr.aws/${{ env.REGISTRY_ALIAS }}/${{ matrix.module }}
      #     # tag with 'latest' for main branch pushes, semantic version for releases/tags, and the branch name for PRs
      #     # PR tags are just for convenience and to avoid warnings, as those builds are not pushed
      #     tags: |
      #       type=raw,value=latest,enable={{is_default_branch}}
      #       type=semver,pattern={{raw}}
      #       type=ref,event=pr

      # - name: Build and push image
      #   if: matrix.module != 'None'
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: "{{defaultContext}}:analyses/${{ matrix.module }}"
      #     push: ${{ github.event_name == 'push'}}
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
