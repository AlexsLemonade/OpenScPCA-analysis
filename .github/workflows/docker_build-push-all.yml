name: Build all docker images
env:
  REGISTRY_ALIAS: openscpca
  # Full list of active docker modules: must be a JSON array as a string
  DOCKER_MODULES: '["hello-python", "hello-r", "simulate-sce"]'

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main
    paths:
      - "analyses/*/Dockerfile"
      - "analyses/*/.dockerignore"
      - "analyses/*/renv.lock"
      - "analyses/*/conda-lock.yml"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  get-modules:
    name: Get module names
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ fromJson(steps.set-modules.outputs.modules) }}
    steps:
      - name: Set all modules for workflow_dispatch
        id: all-modules
        if: github.event_name == 'workflow_dispatch'
        run: echo "$DOCKER_MODULES" > modules.json

      - name: Check out repository
        # no need for checkout if we are setting the module list manually
        if: github.event_name != 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find changed modules names
        id: find-modules
        if: github.event_name != 'workflow_dispatch'
        run: |
          # diff to get changed files, then grep for relevant files, cut to get module names, sort and uniq to get unique names
          git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | \
          grep -E 'Dockerfile|\.dockerignore|renv.lock|conda-lock.yml' | \
          cut -d '/' -f 2 | \
          sort | uniq > modules.txt
          cat modules.txt
          # Use jq to diff with the list of docker modules and export json
          <modules.txt jq -Rcn "$DOCKER_MODULES - ($DOCKER_MODULES - [inputs])" > modules.json
          cat modules.json

      - name: Set modules output
        id: set-modules
        run: |
          if $(jq -e '. | length == 0' modules.json); then
            # if no modules changed, set to modules to ["None"]
            echo "modules='[\"None\"]'" >> $GITHUB_OUTPUT
          else
            # otherwise, set to changed (or all) modules
            echo "modules=$(cat modules.json)" >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT

  docker-matrix:
    name: Build Docker images
    runs-on: ubuntu-latest
    environment: prod
    needs: get-modules
    strategy:
      fail-fast: false
      matrix:
        # If workflow_dispatch, build all modules, otherwise only changed modules
        module: ${{ fromJson(needs.get-modules.outputs.modules) }}

    steps:
      - name: Configure AWS credentials
        if: matrix.module != 'None'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::992382809252:role/GithubOpenId
          role-session-name: githubActionSession
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        if: matrix.module != 'None'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Create ECR repository if needed
        if: matrix.module != 'None'
        id: create-ecr
        run: |
          aws ecr-public describe-repositories --repository-names ${{ matrix.module }} \
          || aws ecr-public create-repository --repository-name ${{ matrix.module }}

      - name: Set up Docker Buildx
        if: matrix.module != 'None'
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata
        if: matrix.module != 'None'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: public.ecr.aws/${{ env.REGISTRY_ALIAS }}/${{ matrix.module }}
          # tag with 'latest' for main branch pushes, semantic version for releases/tags
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{raw}}

      - name: Build and push image
        if: matrix.module != 'None'
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:analyses/${{ matrix.module }}"
          push: ${{ github.event_name == 'push'}}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
